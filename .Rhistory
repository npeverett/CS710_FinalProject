str(babynames)
nms <- filter(babynames, name %in% c("Leslie", "Alex"))
ggplotly(fig6)
fig6 <- ggplot(nms, aes(year, prop, color=sex, linetype=name)) +
geom_line()
ggplotly(fig6)
nms <- filter(babynames, name %in% c("Nate", "Alex"))
fig6 <- ggplot(nms, aes(year, prop, color=sex, linetype=name)) +
geom_line()
ggplotly(fig6)
nms <- filter(babynames, name %in% c("Nathaniel", "Alex"))
fig6 <- ggplot(nms, aes(year, prop, color=sex, linetype=name)) +
geom_line()
ggplotly(fig6)
nms <- filter(babynames, name %in% c("Nathanael", "Alex"))
fig6 <- ggplot(nms, aes(year, prop, color=sex, linetype=name)) +
geom_line()
ggplotly(fig6)
nms <- filter(babynames, name %in% c("Leslie", "Alex"))
fig6 <- ggplot(nms, aes(year, prop, color=sex, linetype=name)) +
geom_line()
ggplotly(fig6)
ggplotly(fig6) %>% layout(dragmode=T)
ggplotly(fig6) %>% layout(dragmode='pan')
ggplotly(fig6, dynamicTicks = T)
ggplotly(fig6, dynamicTicks = T) %>% rangeslider()
fig6b <- ggplot(nms, aes(year, prop, color=sex, linetype=name,
text = paste0('Year: ', year))) + geom_line()
ggplotly(fig6b)
ggplotly(fig6b, dynamicTicks = T, tooltip = 'text')
fig6b <- ggplot(nms, aes(year, prop, color=sex, linetype=name,
text = sprintf('Year: %s ', year))) + geom_line()
ggplotly(fig6b, dynamicTicks = T, tooltip = 'text')
t <- 1000
typeof(sprintf('Year: %s', t))
nms$year
fig6 <- ggplot(nms, aes(year, prop, color=sex, linetype=name)) +
geom_line()
ggplotly(fig6) %>% layout(dragmode='pan')
nms
setwd("D:/CS614/FinalProject/")
ca <- read.csv('california_demo.csv')
ca_prop <- read.csv('california_demo_prop.csv')
death_prop <- ca_prop[1:7,]
death_race <- ca[1:7,]
case_prop <- ca_prop[9:15,]
case_race <- ca[9:15,]
death_prop %>%
plot_ly(x=~death_percent, y=~race, type='bar', name='Death %',
text=paste0(round(death_race$death_percent * 100,1), '%'),
orientation='h', marker=list(color='FFF9C4', line=list(color='#566573', width=1))) %>%
add_trace(x=~better_off, name = 'Better Off', text=paste0(round(death_race$better_off * 100,1), '%'),
marker=list(color='#7DCEA0')) %>%
add_trace(x=~worse_off, name= 'Worse Off', text=paste0(round(death_race$worse_off * 100,1), '%'),
marker=list(color='#E74C3C')) %>%
add_trace(x=~population_percent, name='% Of Population', text=paste0(round(death_race$population_percent * 100,1), '%'),
marker=list(color='#D6EAF8')) %>%
layout(xaxis= list(title=''), yaxis=list(title=''), barmode='stack')
death_prop %>%
plot_ly(x=~death_percent, y=~race, type='bar', name='Death %',
text=paste0(round(death_race$death_percent * 100,1), '%'),
orientation='h', marker=list(color='FFF9C4', line=list(color='#566573', width=1))) %>%
add_trace(x=~better_off, name = 'Better Off', text=paste0(round(death_race$better_off * 100,1), '%'),
marker=list(color='#7DCEA0')) %>%
add_trace(x=~worse_off, name= 'Worse Off', text=paste0(round(death_race$worse_off * 100,1), '%'),
marker=list(color='#E74C3C')) %>%
add_trace(x=~population_percent, name='% Of Population', text=paste0(round(death_race$population_percent * 100,1), '%'),
marker=list(color='#D6EAF8')) %>%
layout(xaxis= list(title=''), yaxis=list(title=''), barmode='stack')
library(shiny)
library(shinydashboard)
library(shinythemes)
library(dashboardthemes)
library(stringr)
library(lubridate)
library(countrycode)
library(sp)
library(sf)
library(dplyr)
library(DT)
library(ggplot2)
library(leaflet)
library(plotly)
# Function to add appropriate spaces without repeating code
linebreaks <- function(n){HTML(strrep(br(), n))}
###############################################
#  READ IN DATA / DATA PREPARATION
###############################################
data <- read.csv('owid-covid-data.csv')
data <- data[!grepl('OWID', data$iso_code),]
data[is.na(data)] <- 0
data$name <- countrycode(data$iso_code, 'iso3c', 'country.name')
data$date <- as.Date(data$date)
world <- read_sf('custom.geo.json')
# Grouped Data
group_data <- data %>%
select(name, total_cases, total_deaths, total_cases_per_million,
total_deaths_per_million, total_tests, total_tests_per_thousand,
total_vaccinations, total_vaccinations_per_hundred) %>%
group_by(name) %>%
summarise(across(everything(), last))
group_data <- sp::merge(x=group_data, y=world, by='name', all.x = T)
death_prop %>%
plot_ly(x=~death_percent, y=~race, type='bar', name='Death %',
text=paste0(round(death_race$death_percent * 100,1), '%'),
orientation='h', marker=list(color='FFF9C4', line=list(color='#566573', width=1))) %>%
add_trace(x=~better_off, name = 'Better Off', text=paste0(round(death_race$better_off * 100,1), '%'),
marker=list(color='#7DCEA0')) %>%
add_trace(x=~worse_off, name= 'Worse Off', text=paste0(round(death_race$worse_off * 100,1), '%'),
marker=list(color='#E74C3C')) %>%
add_trace(x=~population_percent, name='% Of Population', text=paste0(round(death_race$population_percent * 100,1), '%'),
marker=list(color='#D6EAF8')) %>%
layout(xaxis= list(title=''), yaxis=list(title=''), barmode='stack')
death_prop %>%
plot_ly(x=~death_percent, y=~race, type='bar', name='Death %',
text=paste0(round(death_race$death_percent * 100,1), '%'),
orientation='h', marker=list(color='FFF9C4', line=list(color='#566573', width=1))) %>%
add_trace(x=~better_off, name = 'Better Off', text=paste0(round(death_race$better_off * 100,1), '%'),
marker=list(color='#7DCEA0')) %>%
add_trace(x=~worse_off, name= 'Worse Off', text=paste0(round(death_race$worse_off * 100,1), '%'),
marker=list(color='#E74C3C')) %>%
add_trace(x=~population_percent, name='% Of Population', text=paste0(round(death_race$population_percent * 100,1), '%'),
marker=list(color='#D6EAF8')) %>%
layout(xaxis= list(title=''),
yaxis=list(title=''),
barmode='stack') %>%
layout(xaxis=list(tickformat='%'))
death_prop %>%
plot_ly(x=~death_percent, y=~race, type='bar', name='Death %',
text=paste0(round(death_race$death_percent * 100,1), '%'),
orientation='h', marker=list(color='FFF9C4', line=list(color='#566573', width=1))) %>%
add_trace(x=~better_off, name = 'Better Off', text=paste0(round(death_race$better_off * 100,1), '%'),
marker=list(color='#7DCEA0')) %>%
add_trace(x=~worse_off, name= 'Worse Off', text=paste0(round(death_race$worse_off * 100,1), '%'),
marker=list(color='#E74C3C')) %>%
add_trace(x=~population_percent, name='% Of Population', text=paste0(round(death_race$population_percent * 100,1), '%'),
marker=list(color='#D6EAF8')) %>%
layout(xaxis= list(title=''),
yaxis=list(title=''),
barmode='stack') %>%
layout(xaxis=list(ticksuffix='%'))
death_prop %>%
plot_ly(x=~death_percent, y=~race, type='bar', name='Death %',
text=paste0(round(death_race$death_percent * 100,1), '%'),
orientation='h', marker=list(color='FFF9C4', line=list(color='#566573', width=1))) %>%
add_trace(x=~better_off, name = 'Better Off', text=paste0(round(death_race$better_off * 100,1), '%'),
marker=list(color='#7DCEA0')) %>%
add_trace(x=~worse_off, name= 'Worse Off', text=paste0(round(death_race$worse_off * 100,1), '%'),
marker=list(color='#E74C3C')) %>%
add_trace(x=~population_percent, name='% Of Population', text=paste0(round(death_race$population_percent * 100,1), '%'),
marker=list(color='#D6EAF8')) %>%
layout(xaxis= list(title=''),
yaxis=list(title=''),
barmode='stack') %>%
layout(xaxis=list(ticksuffix='.0%'))
death_prop %>%
plot_ly(x=~death_percent, y=~race, type='bar', name='Death %',
text=paste0(round(death_race$death_percent * 100,1), '%'),
orientation='h', marker=list(color='FFF9C4', line=list(color='#566573', width=1))) %>%
add_trace(x=~better_off, name = 'Better Off', text=paste0(round(death_race$better_off * 100,1), '%'),
marker=list(color='#7DCEA0')) %>%
add_trace(x=~worse_off, name= 'Worse Off', text=paste0(round(death_race$worse_off * 100,1), '%'),
marker=list(color='#E74C3C')) %>%
add_trace(x=~population_percent, name='% Of Population', text=paste0(round(death_race$population_percent * 100,1), '%'),
marker=list(color='#D6EAF8')) %>%
layout(xaxis= list(title=''),
yaxis=list(title=''),
barmode='stack') %>%
layout(xaxis=list(tickformat='.0%'))
# Demographics Data
ca <- read.csv('california_demo.csv')
ca_prop <- read.csv('california_demo_prop.csv')
death_prop <- ca_prop[1:7,]
death_race <- ca[1:7,]
case_prop <- ca_prop[9:15,]
case_race <- ca[9:15,]
runApp()
runApp()
runApp()
runApp()
runApp()
case_prop %>%
plot_ly(x=~death_percent, y=~race, type='bar', name='Death %',
text=paste0(round(death_race$death_percent * 100,1), '%'),
orientation='h', marker=list(color='FFF9C4', line=list(color='#566573', width=1))) %>%
add_trace(x=~better_off, name = 'Better Off', text=paste0(round(death_race$better_off * 100,1), '%'),
marker=list(color='#7DCEA0')) %>%
add_trace(x=~worse_off, name= 'Worse Off', text=paste0(round(death_race$worse_off * 100,1), '%'),
marker=list(color='#E74C3C')) %>%
add_trace(x=~population_percent, name='% Of Population', text=paste0(round(death_race$population_percent * 100,1), '%'),
marker=list(color='#D6EAF8')) %>%
layout(xaxis= list(title=''),
yaxis=list(title=''),
barmode='stack') %>%
layout(xaxis=list(tickformat='.0%'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?leafletOutput
runApp()
runApp()
runApp()
runApp()
group_data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(group_data$total_cases_per_million)
hist(group_data$total_cases_per_million)
hist(group_data$total_deaths_per_million)
hist(group_data$total_vaccinations_per_hundred)
runApp()
runApp()
group_data
subset(data, name == 'United States of America')
data
unique(data$name)
subset(data, name == 'United States')
pp <- subset(data, name == 'United States')
tail(pp)
slice(pp, 1:(n() - 1))
tail(slice(pp, 1:(n() - 1)))
runApp()
###############################################
#  READ IN DATA / DATA PREPARATION
###############################################
data <- read.csv('owid-covid-data.csv')
data <- data[!grepl('OWID', data$iso_code),]
data[is.na(data)] <- 0
data <- slice(data, 1:(n()-1))
data$name <- countrycode(data$iso_code, 'iso3c', 'country.name')
data$date <- as.Date(data$date)
world <- read_sf('custom.geo.json')
# Grouped Data
group_data <- data %>%
select(name, total_cases, total_deaths, total_cases_per_million,
total_deaths_per_million, total_tests, total_tests_per_thousand,
total_vaccinations, total_vaccinations_per_hundred) %>%
group_by(name) %>%
summarise(across(everything(), last))
group_data <- sp::merge(x=group_data, y=world, by='name', all.x = T)
# Demographics Data
ca <- read.csv('california_demo.csv')
ca_prop <- read.csv('california_demo_prop.csv')
death_prop <- ca_prop[1:7,]
death_race <- ca[1:7,]
case_prop <- ca_prop[9:15,]
case_race <- ca[9:15,]
runApp()
tail(subset(data, name=='United States'))
length(data)
length(data$iso_code)
###############################################
#  READ IN DATA / DATA PREPARATION
###############################################
data <- read.csv('owid-covid-data.csv')
data <- data[!grepl('OWID', data$iso_code),]
data[is.na(data)] <- 0
data <- data[-c(127035),]
data$name <- countrycode(data$iso_code, 'iso3c', 'country.name')
data$date <- as.Date(data$date)
world <- read_sf('custom.geo.json')
# Grouped Data
group_data <- data %>%
select(name, total_cases, total_deaths, total_cases_per_million,
total_deaths_per_million, total_tests, total_tests_per_thousand,
total_vaccinations, total_vaccinations_per_hundred) %>%
group_by(name) %>%
summarise(across(everything(), last))
group_data <- sp::merge(x=group_data, y=world, by='name', all.x = T)
# Demographics Data
ca <- read.csv('california_demo.csv')
ca_prop <- read.csv('california_demo_prop.csv')
death_prop <- ca_prop[1:7,]
death_race <- ca[1:7,]
case_prop <- ca_prop[9:15,]
case_race <- ca[9:15,]
runApp()
data %>%
select(name, total_cases, total_deaths, total_cases_per_million,
total_deaths_per_million, total_tests, total_tests_per_thousand,
total_vaccinations, total_vaccinations_per_hundred) %>%
group_by(name)
?last
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
###############################################
#  READ IN DATA / DATA PREPARATION
###############################################
data <- read.csv('owid-covid-data.csv')
data <- data[!grepl('OWID', data$iso_code),]
data[is.na(data)] <- 0
data$name <- countrycode(data$iso_code, 'iso3c', 'country.name')
data$date <- as.Date(data$date)
# Grouped Data
group_data <- data %>%
select(name, total_cases, total_deaths, total_cases_per_million, people_fully_vaccinated, people_fully_vaccinated_per_hundred,
total_deaths_per_million, total_tests, total_tests_per_thousand,
total_vaccinations, total_vaccinations_per_hundred) %>%
group_by(name) %>%
summarise(name= nth(name, -2L), total_cases=nth(total_cases, -2L), total_deaths=nth(total_deaths, -2L),
total_cases_per_million=nth(total_cases_per_million, -2L), people_fully_vaccinated=nth(people_fully_vaccinated, -2L),
people_fully_vaccinated_per_hundred=nth(people_fully_vaccinated_per_hundred,-2L), total_deaths_per_million=nth(total_deaths_per_million,-2L),
total_tests=nth(total_tests, -2L), total_tests_per_thousand=nth(total_tests_per_thousand,-2L),
total_vaccinations=nth(total_vaccinations, -2L), total_vaccinations_per_hundred=nth(total_vaccinations_per_hundred, -2L))
group_data <- sp::merge(x=group_data, y=world, by='name', all.x = T)
group_data$people_fully_vaccinated_per_hundred
round(group_data$people_fully_vaccinated_per_hundred)
runApp()
runApp()
runApp()
runApp()
group_data$people_fully_vaccinated_per_hundred
runApp()
runApp()
###############################################
#  READ IN DATA / DATA PREPARATION
###############################################
data <- read.csv('owid-covid-data.csv')
data <- data[!grepl('OWID', data$iso_code),]
data[is.na(data)] <- 0
data$name <- countrycode(data$iso_code, 'iso3c', 'country.name')
data$date <- as.Date(data$date)
# Grouped Data
group_data <- data %>%
select(name, total_cases, total_deaths, total_cases_per_million, people_fully_vaccinated, people_fully_vaccinated_per_hundred,
total_deaths_per_million, total_tests, total_tests_per_thousand,
total_vaccinations, total_vaccinations_per_hundred) %>%
group_by(name) %>%
summarise(name= nth(name, -2L), total_cases=nth(total_cases, -2L), total_deaths=nth(total_deaths, -2L),
total_cases_per_million=nth(total_cases_per_million, -2L), people_fully_vaccinated=nth(people_fully_vaccinated, -2L),
people_fully_vaccinated_per_hundred=nth(people_fully_vaccinated_per_hundred,-2L), total_deaths_per_million=nth(total_deaths_per_million,-2L),
total_tests=nth(total_tests, -2L), total_tests_per_thousand=nth(total_tests_per_thousand,-2L),
total_vaccinations=nth(total_vaccinations, -2L), total_vaccinations_per_hundred=nth(total_vaccinations_per_hundred, -2L))
group_data <- sp::merge(x=group_data, y=world, by='name', all.x = T)
group_data$people_fully_vaccinated_per_hundred
group_data$people_fully_vaccinated
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
case_race
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data
runApp()
runApp()
runApp()
runApp()
runApp()
###############################################
#  USER INTERFACE
###############################################
ui <- dashboardPage(
# Header
dashboardHeader(title='COVID 19 Dashboard'),
# Sideboard
dashboardSidebar(
sidebarMenu(
menuItem("Geographic Data", tabName = 'geo', icon=icon('globe-americas')),
menuItem("Regional Data", tabName = 'reg', icon=icon('hand-holding-medical')),
menuItem("Demographic Data", tabName = 'demo', icon=icon('restroom')),
menuItem("Raw Data Table", tabName = 'table', icon=icon('table'))
)
),
# Main Body
dashboardBody(
shinyDashboardThemes(
theme='blue_gradient'
),
tabItems(
# GEOGRAPHIC DATA UI TAB
tabItem(tabName='geo',
column(width=2,
fluidRow(
linebreaks(25),
selectInput('metric', '', choices=c('Cases', 'Deaths', 'Vaccination'), selected ='Cases'),
selectInput('quant', '', choices=c('Total', 'Per Capita'), selected='Total')
)
),
column(width=10,
fluidRow(
tags$style(type = "text/css", ".leaflet-container {background-color:rgba(255,0,0,0.0);} "),
h2('World Map of Covid-19 Pandemic', style="color: #184464; text-align: center"),
leafletOutput('world_map', width='100%', height = 750),
p('Note: Some data may be missing or outdated. This data is sourced from: '),
a('Our World In Data', href= 'https://ourworldindata.org/coronavirus')
)
)
),
# REGIONAL DATA UI TAB
tabItem(tabName = 'reg',
h1('Regional Statistics', style="color: #184464; text-align: center"),
fluidRow(
column(width=6,
h2('North America'),
h4('59,348,249 Total Cases'),
plotlyOutput('NRA')),
column(width=6,
h2('South America'),
h4('39,022,166 Total Cases'),
plotlyOutput('SA'))
),
fluidRow(
linebreaks(4),
column(width=6,
h2('Europe'),
h4('74,508,737 Total Cases'),
plotlyOutput('EU')),
column(width=6,
h2('Asia'),
h4('82,288,806 Total Cases'),
plotlyOutput('AS'))
),
fluidRow(
linebreaks(4),
column(width=6,
h2('Africa'),
h4('8,761,409 Total Cases'),
plotlyOutput('AF')),
column(width=6,
h2('Oceania'),
h4('372,122 Total Cases'),
plotlyOutput('OC'))
)
),
# DEMOGRAPHIC UI TAB
tabItem(tabName = 'demo',
h1('Racial Inequalities in the United States', style="color: #184464; text-align: center"),
linebreaks(4),
column(width=3,
linebreaks(15),
checkboxGroupInput('race', 'Race',
choices=c('Latino', 'White', 'Asian', 'African American', 'Multi-Race',
'American Indian or Alaska Native', 'Native Hawaiian and other Pacific Islander'),
selected=c('Latino', 'White', 'Asian', 'African American', 'Multi-Race',
'American Indian or Alaska Native', 'Native Hawaiian and other Pacific Islander'))
),
column(width=9,
fluidRow(
h4('Covid Cases by Race'),
plotlyOutput('race_case')
),
linebreaks(5),
fluidRow(
h4('Covid Deaths by Race'),
plotlyOutput('race_death')
)
)
),
# DATATABLE UI TAB
tabItem(tabName = 'table',
dataTableOutput('world_datatable')
)
)
)
)
runApp()
runApp()
?dashboardPage
runApp()
runApp()
library(shinyWidgets)
runApp()
runApp()
runApp()
?setBackgroundColor
runApp()
runApp()
?shinyDashboardThemes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
